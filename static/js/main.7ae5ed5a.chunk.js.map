{"version":3,"sources":["logo.svg","firebase.js","service.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","db","collection","TutorialDataService","doc","props","onCollectionUpdate","querySnapshot","value","forEach","document","data","console","log","setState","sliderValue","onSliderChange","state","handleChange","bind","handleSubmit","handleReset","this","unsubscribe","onSnapshot","get","then","snapshot","childSnapshot","id","docSnapshot","tutorial","add","input","update","event","target","preventDefault","docRef","exists","val","delete","Row","Col","Button","variant","onClick","min","max","onChange","Component","App","Container","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":";sPAAe,I,8CCefA,IAASC,cAbM,CAEXC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAMFT,UAASU,Y,8CCHpBC,EAAKX,EAASY,WAAW,gBA4LhBC,GA3LEF,EAAGG,IAAH,wB,kDAIf,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAoBRC,mBAAqB,SAACC,GAEpB,IAAIC,EAAQ,EACZD,EAAcE,SAAQ,SAACC,GACrB,IAAMN,EAAKM,EAASC,OACpBC,QAAQC,IAAIT,GACZI,EAAQJ,EAAII,SAEd,EAAKM,SAAS,CAACN,MAAMA,EAAOO,YAAYP,KA7BvB,EAoHnBQ,eAAiB,SAAAR,GACf,EAAKM,SACH,CACEC,YAAYP,IAEd,WACEI,QAAQC,IAAI,EAAKI,MAAMF,iBAxH3B,EAAKE,MAAO,GAGZ,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,YAAc,EAAKA,YAAYF,KAAjB,gBAPF,E,gEAWjBG,KAAKC,YAAcjC,EAASY,WAAW,gBAAgBsB,WAAWF,KAAKhB,sB,6CAMvEgB,KAAKC,gB,gCAmBL,IAAIf,EAiBJ,OAhBAP,EAAGwB,MAAMC,MAAK,SAASC,GACrBA,EAASlB,SAAS,SAASmB,GACzB3B,EAAGG,IAAIwB,EAAcC,IAAIJ,MACzBC,MAAM,SAAAI,GACJ,CAACA,GAAarB,SAAS,SAAAL,GACrB,IAAMO,EAAOP,EAAIO,OACjBC,QAAQC,IAAIT,EAAIyB,GAAIlB,GACpBC,QAAQC,IAAR,oBAAyBF,EAAKkB,GAA9B,oBAA4ClB,EAAKH,QACjDA,EAASG,EAAKH,kBAOtBI,QAAQC,IAAIL,GACLA,I,6BAKFuB,GACL,OAAO9B,EAAG+B,IAAID,K,6BAKRE,GACNhC,EAAGwB,MAAMC,MAAK,SAASC,GACrBA,EAASlB,SAAS,SAASmB,GACzB3B,EAAGG,IAAIwB,EAAcC,IAAIK,OAAO,CAAC1B,MAAMyB,Y,mCAUhCE,GAAQ,IAAD,OAClBb,KAAKR,SAAS,CAACmB,MAAOE,EAAMC,OAAO5B,QAAQ,WACvC,EAAK0B,OAAOC,EAAMC,OAAO5B,MAAM,Q,mCAIxB2B,GACXA,EAAME,iBACNf,KAAKY,OAAOZ,KAAKL,MAAMF,e,kCAKboB,GACVA,EAAME,iBAENf,KAAKY,OAAO,K,kKAMNI,EAAUhD,EAASY,WAAW,gBAAgBE,IAAI,wB,SACtCkC,EAAOb,M,WAAnBrB,E,QACEmC,O,uBACN3B,QAAQC,IAAI,yC,kBACL,G,cAGC2B,EAAMpC,EAAIO,OAAOH,MACvBc,KAAKR,SAAS,CAACN,MAAMgC,IACrB5B,QAAQC,IAAI2B,G,kBACLA,G,oIAGNX,GACL,OAAO5B,EAAGG,IAAIyB,GAAIY,W,+BAgBlB,OACE,8BACE,cAACC,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACA,iCAMA,cAACC,EAAA,EAAD,CACEC,QAAQ,kBACRC,QAASxB,KAAKF,aAFhB,oBAOA,cAACwB,EAAA,EAAD,CACEC,QAAQ,kBACRC,QAASxB,KAAKD,YAFhB,sBASF,8BACE,cAAC,IAAD,CACC0B,IAAK,EACLC,IAAK,IACLxC,MAAOc,KAAKL,MAAMF,YAClBkC,SAAU3B,KAAKN,mBAWlB,iDAEiBM,KAAKL,MAAMF,0B,GA/KFmC,c,QC+CnBC,E,kDA3Cb,WAAY9C,GAAQ,IAAD,8BACjB,cAAMA,IACDY,MAAQ,CACXT,MAAO,GACPP,GAAIX,EAASY,WAAW,iBAJT,E,qDAYjB,OACE,eAACkD,EAAA,EAAD,CAAWC,UAAU,MAArB,UACI,cAACX,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACA,8BACE,sTAGA,sGAGA,2CAMJ,cAACD,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,UACC,cAAC,EAAD,e,GAjCKO,aCPHI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFtD,SAASuD,eAAe,SAM1BX,M","file":"static/js/main.7ae5ed5a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import firebase from \"firebase\";\r\n\r\nconst config = {\r\n\r\n    apiKey: \"AIzaSyA3Jx8S_Yh6vdOI9RRP1ybnuG_Kvox093g\",\r\n    authDomain: \"slider-app1.firebaseapp.com\",\r\n    databaseURL: \"https://slider-app1.firebaseio.com\",\r\n    projectId: \"slider-app1\",\r\n    storageBucket: \"slider-app1.appspot.com\",\r\n    messagingSenderId: \"813536171331\",\r\n    appId: \"1:813536171331:web:ee4f67d30e6b1f45c48bf6\",\r\n    measurementId: \"G-2PMF6CRJ79\"\r\n }\r\n\r\n//!firebase.apps.length ? firebase.initializeApp(config) : null;\r\nfirebase.initializeApp(config);\r\n\r\n export default  firebase.firestore();\r\n","import firebase from \"./firebase\";\r\nimport React, { Component, useState } from \"react\";\r\nimport Slider, { Range } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nconst db = firebase.collection(\"/slider-data\");\r\nconst sliderDB = db.doc(`hIGjEMjhpHO604ed6VKp`)\r\n\r\nclass TutorialDataService extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n\r\n  }\r\n  componentDidMount() {\r\n    this.unsubscribe = firebase.collection('/slider-data').onSnapshot(this.onCollectionUpdate) \r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\r\n    this.unsubscribe()\r\n  }\r\n\r\n  \r\n  onCollectionUpdate = (querySnapshot) => {\r\n    // we have to update the state\r\n    let value = 0;\r\n    querySnapshot.forEach((document) => {\r\n      const doc= document.data();\r\n      console.log(doc)\r\n      value = doc.value\r\n    })\r\n    this.setState({value:value, sliderValue:value})\r\n\r\n  }\r\n\r\n\r\n\r\n  getData() {\r\n    let value;\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).get().\r\n        then( docSnapshot => {\r\n          [docSnapshot].forEach( doc => {\r\n            const data = doc.data();\r\n            console.log(doc.id, data);\r\n            console.log(`sliderID: ${data.id}, value: ${data.value}`)\r\n            value =  data.value;\r\n          })\r\n\r\n        })\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n    console.log(value)\r\n    return value\r\n  }\r\n\r\n\r\n\r\n  create(tutorial) {\r\n    return db.add(tutorial);\r\n  }\r\n\r\n\r\n\r\n  update( input) {\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).update({value:input})\r\n        // thisRef.setState({value:input},\r\n        //    ()=>console.log(`updated value:`+ input) )\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n  }\r\n\r\n \r\n    \r\n  handleChange(event) {\r\n    this.setState({input: event.target.value}, ()=>{\r\n        this.update(event.target.value,this)\r\n      });\r\n    }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    this.update(this.state.sliderValue)\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  handleReset(event) {\r\n    event.preventDefault();\r\n    //this.setState({sliderValue:0})\r\n    this.update(0)\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  async getSliderValue(){\r\n    const docRef =  firebase.collection(\"/slider-data\").doc('hIGjEMjhpHO604ed6VKp')\r\n    const doc = await docRef.get()\r\n    if(!doc.exists){\r\n      console.log(\"ERROR! doc doesnt exsits on firestore\")\r\n      return 0;\r\n    }\r\n    else{\r\n        const val = doc.data().value;\r\n        this.setState({value:val})\r\n        console.log(val)\r\n        return val;\r\n    }\r\n  }\r\n  delete(id) {\r\n    return db.doc(id).delete();\r\n  }\r\n\r\n  onSliderChange = value => {\r\n    this.setState(\r\n      {\r\n        sliderValue:value\r\n      },\r\n      () => {\r\n        console.log(this.state.sliderValue);\r\n      }\r\n    );\r\n  };\r\n\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col>\r\n          <form >\r\n          {/* <label>\r\n            Name:\r\n            <input type=\"text\" value={this.state.input} onChange={this.handleChange} />\r\n          </label> */}\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Submit\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleReset}>\r\n              Reset\r\n          </Button>\r\n\r\n        </form>\r\n   \r\n\r\n        <div>\r\n          <Slider\r\n           min={0}\r\n           max={120}\r\n           value={this.state.sliderValue}\r\n           onChange={this.onSliderChange}\r\n\r\n\r\n          />\r\n        </div>\r\n\r\n        {/* <div>\r\n         text value: {this.state.value} \r\n\r\n        </div> */}\r\n\r\n        <div>\r\n\r\n          slider value: {this.state.sliderValue}\r\n        </div>\r\n\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TutorialDataService;","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component, useState } from \"react\";\n\n\n\n// import firestore from \"./firestore\";\nimport TutorialDataService from \"./service\";\nimport firebase from \"./firebase\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Button,\n  Container,\n  Row,\n  Col\n} from \"react-bootstrap\";\n// import { useCollectionData } from 'react-firebase-hooks/firestore';\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      db: firebase.collection(\"/slider-data\")\n\n    };\n\n  }\n\n\n  render(){\n    return (\n      <Container className=\"App\">\n          <Row>\n            <Col>\n            <p>\n              <h4>\n              \"הכאב אינו תופס מקום בתוכנו אלא כפי שאנו מרשים לו לתפוס\"\n              </h4>\n              <h5>\n              מישל דה מונטן\n              </h5>\n              <h6>\n                :)\n              </h6>\n            </p>\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n             <TutorialDataService />\n            </Col>\n          </Row>\n\n\n      </Container>\n    );\n  }\n  \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}