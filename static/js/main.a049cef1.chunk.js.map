{"version":3,"sources":["logo.svg","services/firebase.js","ManagerPage.js","CalibrationPage.js","LongTestPage.js","ExperimenterPage.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","ManagerPage","props","useState","experimemtDocID","setExpirementerDoc","experimemterName","setExpirementerName","experimemtTime","setExpirementTime","experimentUpdatingData","setExpData","setAsLoaded","dataRenderedasList","setRenderData","Button","onClick","db","orderBy","limit","get","then","data","docRef","docs","docData","docID","id","time","split","console","log","undefined","doc","onSnapshot","docSnapshot","list","calibTest","forEach","item","testNum","value","push","err","renderData3","onCollectionUpdate","collection","CalibrationPage","querySnapshot","document","setState","sliderValue","onSliderChange","state","testCouner","handleChange","bind","handleSubmit","handleReset","this","unsubscribe","snapshot","childSnapshot","tutorial","add","input","update","dataToUpdate","prevState","newData","calibrationTests","event","target","preventDefault","addTestScoreToDoc2","exists","val","delete","Row","Col","variant","style","width","min","max","defaultValue","onChange","Component","LongTestPage","CalibTest","topicId","useParams","docRefID","LongTest","ExperimenterPage","useRouteMatch","path","url","startExperiment","setExpirmentStatus","expirementerDoc","to","exact","fullname","longTests","dateFormat","Date","sendDocRefToParent","initNewDocument","App","getDocRefFromChild","activeDocRef","settings","timestampsInSnapshots","ReactGA","initialize","debug","pageview","window","location","pathname","search","Container","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.a049cef1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import firebase from \"firebase\";\r\n\r\nconst config = {\r\n\r\n    apiKey: \"AIzaSyA3Jx8S_Yh6vdOI9RRP1ybnuG_Kvox093g\",\r\n    authDomain: \"slider-app1.firebaseapp.com\",\r\n    databaseURL: \"https://slider-app1.firebaseio.com\",\r\n    projectId: \"slider-app1\",\r\n    storageBucket: \"slider-app1.appspot.com\",\r\n    messagingSenderId: \"813536171331\",\r\n    appId: \"1:813536171331:web:ee4f67d30e6b1f45c48bf6\",\r\n    measurementId: \"G-2PMF6CRJ79\"\r\n }\r\n\r\n//!firebase.apps.length ? firebase.initializeApp(config) : null;\r\nfirebase.initializeApp(config);\r\n\r\n export default  firebase.firestore();\r\n","import React, { useState , useEffect} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n\r\n} from \"react-bootstrap\";\r\nimport firebase from \"./services/firebase\";\r\n\r\n\r\n const ManagerPage = (props) => {\r\n\r\n        const [experimemtDocID, setExpirementerDoc] = useState();\r\n        const [experimemterName, setExpirementerName] = useState(\"\");\r\n        const [experimemtTime, setExpirementTime] = useState(\"\");\r\n        const [experimentUpdatingData, setExpData] = useState()\r\n        const [dataAsLsit, setDataAsList] = useState([])\r\n        const [loaded, setAsLoaded] = useState(false)\r\n        const [dataRenderedasList, setRenderData] = useState([])\r\n\r\n    // useEffect(() => { \r\n    //     const unsubscribe = firebase.collection('/slider-data').onSnapshot(onCollectionUpdate2)\r\n    //     console.log(\"onCollectionUpdate2: \")\r\n\r\n    //     //remember to unsubscribe from your realtime listener on unmount or you will create a memory leak\r\n    //     return () => unsubscribe()\r\n    // }, []);\r\n\r\n    function onCollectionUpdate2(snap) {\r\n        const data = snap.docs.map(doc => doc.data())\r\n        console.log(data)\r\n\r\n        // console.log(\"update: \" +experimemtDocID)\r\n        // if(experimemtDocID != undefined){\r\n        //    const doc = props.db.doc(experimemtDocID)\r\n        //    console.log('doc updated!' + experimemtDocID)\r\n\r\n        //    const observer = doc.onSnapshot(docSnapshot => {\r\n        //        const data = docSnapshot.data();\r\n        //        console.log(`Received doc snapshot:${docSnapshot.id} ${data}`);\r\n        //        console.log(data)\r\n        //        setExpData(data)\r\n        //        renderData()\r\n        //        // ...\r\n        //      }, err => {\r\n        //        console.log(`Encountered error: ${err}`);\r\n        //      });\r\n\r\n        // }\r\n       \r\n\r\n     }\r\n\r\n\r\n\r\n     function getLateseDocID(){\r\n        const db = props.db\r\n         db.orderBy('time', 'desc').limit(1).get().\r\n            then((data) =>{\r\n                const docRef = data.docs[0];\r\n                const docData = docRef.data()\r\n                const docID = docRef.id\r\n                setExpirementerDoc(docID)\r\n                setExpirementerName(docData[\"fullname\"])\r\n                const time = docData.time.split(\" \")[1].split(\":\")\r\n\r\n                setExpirementTime(time[0] + \":\" + time[1])\r\n                setAsLoaded(true)\r\n\r\n                onCollectionUpdate()\r\n\r\n\r\n            } \r\n            )\r\n\r\n    }\r\n   \r\n\r\n     function onCollectionUpdate() {\r\n         console.log(\"update: \" +experimemtDocID)\r\n         if(experimemtDocID != undefined){\r\n            const doc = props.db.doc(experimemtDocID)\r\n            console.log('doc updated!' + experimemtDocID)\r\n\r\n            const observer = doc.onSnapshot(docSnapshot => {\r\n                const data = docSnapshot.data();\r\n                console.log(`Received doc snapshot:${docSnapshot.id} ${data}`);\r\n               // console.log(data)\r\n                setExpData(data)\r\n                renderData3()\r\n                // ...\r\n              }, err => {\r\n                console.log(`Encountered error: ${err}`);\r\n              });\r\n\r\n         }\r\n        \r\n\r\n      }\r\n\r\n\r\n\r\n      function renderData3(){\r\n        if(experimentUpdatingData){\r\n\r\n            const doc = props.db.doc(experimemtDocID)\r\n            console.log('doc updated!' + experimemtDocID)\r\n\r\n            const observer = doc.onSnapshot(docSnapshot => {\r\n                const data = docSnapshot.data();\r\n                console.log(`Received doc snapshot:${docSnapshot.id} ${data}`);\r\n               // console.log(data)\r\n                let list = []\r\n                let calibTest = data[\"calibrationTests\"]\r\n                console.log('calib: ')\r\n                console.log( calibTest)\r\n                calibTest.forEach( (item) => {\r\n                    console.log(`${item.testNum} : ${item.value}`)\r\n                    list.push(\r\n                        <li >\r\n                        {item.testNum} : {item.value}\r\n                        </li>\r\n                    )\r\n                })\r\n                setRenderData(list);\r\n\r\n                // ...\r\n              }, err => {\r\n                console.log(`Encountered error: ${err}`);\r\n              });\r\n            \r\n\r\n            console.log(\"hiiiiii\" )\r\n\r\n            \r\n\r\n        }\r\n  \r\n      }\r\n\r\n\r\n      function renderData2(){\r\n        if(experimentUpdatingData){\r\n            \r\n\r\n            console.log(\"hiiiiii\" )\r\n\r\n            let list = []\r\n            let calibTest = experimentUpdatingData[\"calibrationTests\"]\r\n            console.log('calib: ')\r\n            console.log( calibTest)\r\n            calibTest.forEach( (item) => {\r\n                console.log(`${item.testNum} : ${item.value}`)\r\n                list.push(\r\n                    <ListGroup.Item >\r\n                    {item.testNum} : {item.value}\r\n                    </ListGroup.Item>\r\n                )\r\n            })\r\n            setRenderData(list);\r\n\r\n        }\r\n  \r\n      }\r\n\r\n      function renderData(){\r\n        if(experimentUpdatingData){\r\n            console.log(\"hiiiiii\" )\r\n\r\n            let list = []\r\n            //let calibTest = experimentUpdatingData[\"calibrationTests\"]\r\n            for (const [key, value] of Object.entries(experimentUpdatingData)) {\r\n                console.log(`${key}: ${value}`);\r\n                let a ={}\r\n                a[\"key\"]= value\r\n                list.push({testNum: key, testVal:value})\r\n            }\r\n            setDataAsList(list)\r\n            setRenderData (\r\n                sortByKey(list,\"testNum\").reduce( (acc,curr)=> \r\n                                acc.concat(\r\n                                    <li >\r\n                                        {curr.testNum} : {curr.testVal}\r\n                                    </li>\r\n                                )\r\n                                , [])\r\n            )\r\n        }\r\n  \r\n      }\r\n\r\n\r\n\r\n      function sortByKey(array, key) {\r\n        let ans =  array.sort(function(a, b) {\r\n            var x = a[key]; var y = b[key];\r\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n        });\r\n        return ans\r\n    }\r\n    \r\n\r\n    \r\n        return (\r\n            <div>\r\n                <h3>Manager Page</h3>\r\n                <h6>שם הנסיין: {experimemterName} </h6>\r\n                <h6>זמן תחילת הניסוי: {experimemtTime} </h6>\r\n\r\n                <Button onClick={getLateseDocID}>\r\n                    הצג פרטי ניסוי נוכחי\r\n                </Button>\r\n\r\n                <div>\r\n                    <ul>\r\n\r\n                        {\r\n                     \r\n\r\n                                dataRenderedasList\r\n                                \r\n                \r\n                        }\r\n                    \r\n\r\n                    </ul>\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default ManagerPage;","import firebase from \"./services/firebase\";\r\nimport React, { Component, useState } from \"react\";\r\nimport Slider, { Range } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nconst db = firebase.collection(\"/BGU-lab-dev\");\r\n\r\nclass CalibrationPage extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      testCouner: 0,\r\n      sliderValue: 0,\r\n\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n\r\n    \r\n\r\n  }\r\n  componentDidMount() {\r\n    this.unsubscribe = firebase.collection('/slider-data').onSnapshot(this.onCollectionUpdate) \r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\r\n    this.unsubscribe()\r\n  }\r\n\r\n  \r\n  onCollectionUpdate = (querySnapshot) => {\r\n    // we have to update the state\r\n    let value = 0;\r\n    querySnapshot.forEach((document) => {\r\n      const doc= document.data();\r\n      console.log(doc)\r\n      value = doc.value\r\n    })\r\n    this.setState({value:value, sliderValue:value})\r\n\r\n  }\r\n\r\n\r\n\r\n  getData() {\r\n    let value;\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).get().\r\n        then( docSnapshot => {\r\n          [docSnapshot].forEach( doc => {\r\n            const data = doc.data();\r\n            console.log(doc.id, data);\r\n            console.log(`sliderID: ${data.id}, value: ${data.value}`)\r\n            value =  data.value;\r\n          })\r\n\r\n        })\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n    console.log(value)\r\n    return value\r\n  }\r\n\r\n\r\n\r\n  create(tutorial) {\r\n    return db.add(tutorial);\r\n  }\r\n\r\n\r\n\r\n  update( input) {\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).update({value:input})\r\n        // thisRef.setState({value:input},\r\n        //    ()=>console.log(`updated value:`+ input) )\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n  }\r\n\r\n  addTestScoreToDoc2(input){\r\n         db.orderBy('time', 'desc').limit(1).get().\r\n            then((data) =>{\r\n              const docRef = data.docs[0];\r\n              const docData = docRef.data()\r\n              const docID = docRef.id\r\n              let dataToUpdate = docData[\"calibrationTests\"]\r\n\r\n              let scoreCounter = `כיול ${this.state.testCouner}`\r\n              this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n              let newData ={testNum : ` כיול ${this.state.testCouner}`, value:input }\r\n              //newData[scoreCounter] = input\r\n              dataToUpdate.push(newData)\r\n              const docRefUpdate = db.doc(docRef.id);\r\n              docRefUpdate.update({calibrationTests: dataToUpdate})\r\n\r\n\r\n            } \r\n            )\r\n  }\r\n  // addTestScoreToDoc(input){\r\n  //   const docRef = db.doc(this.props.docRefID);\r\n  //   let scoreCounter = `כיול ${this.state.testCouner}`\r\n  //   this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n  //   let newData ={}\r\n  //   newData[scoreCounter] = input\r\n  //   let docData = docRef.get().then((doc) =>  {\r\n  //     let data = doc.id\r\n  //     console.log(\"wowowow \" + data.id )}\r\n  //   )\r\n    \r\n  //   // let toUdpate = docRef.calibrationTests\r\n  //   // toUdpate.push(newData)\r\n  //   // docRef.update(\r\n  //   //   {calibrationTests: toUdpate}\r\n  //   // )\r\n\r\n\r\n  //       //docRef.update(newData)\r\n\r\n  //   console.log(`added score: ${input}`)\r\n  // }\r\n\r\n \r\n    \r\n  handleChange(event) {\r\n    this.setState({input: event.target.value}, ()=>{\r\n        this.update(event.target.value,this)\r\n      });\r\n    }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    //this.update(this.state.sliderValue)\r\n    this.addTestScoreToDoc2(this.state.sliderValue)\r\n    this.setState({sliderValue:0})\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  handleReset(event) {\r\n    event.preventDefault();\r\n    //this.setState({sliderValue:0})\r\n    this.setState({sliderValue:0})\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  async getSliderValue(){\r\n    const docRef =  firebase.collection(\"/slider-data\").doc('hIGjEMjhpHO604ed6VKp')\r\n    const doc = await docRef.get()\r\n    if(!doc.exists){\r\n      console.log(\"ERROR! doc doesnt exsits on firestore\")\r\n      return 0;\r\n    }\r\n    else{\r\n        const val = doc.data().value;\r\n        this.setState({value:val})\r\n        console.log(val)\r\n        return val;\r\n    }\r\n  }\r\n  delete(id) {\r\n    return db.doc(id).delete();\r\n  }\r\n\r\n  onSliderChange = value => {\r\n    this.setState(\r\n      {\r\n        sliderValue:value\r\n      },\r\n      () => {\r\n        console.log(this.state.sliderValue);\r\n      }\r\n    );\r\n  };\r\n\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col>\r\n          <form >\r\n          {/* <label>\r\n            Name:\r\n            <input type=\"text\" value={this.state.input} onChange={this.handleChange} />\r\n          </label> */}\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Submit\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleReset}>\r\n              Reset\r\n          </Button>\r\n\r\n        </form>\r\n   \r\n\r\n\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col style = {{width:\"200px\"}}>\r\n\r\n              <div >\r\n              <Slider\r\n              min={0}\r\n              max={10}\r\n              defaultValue={0}\r\n              value={this.state.sliderValue}\r\n              onChange={this.onSliderChange}\r\n\r\n\r\n              />\r\n            </div>\r\n\r\n            {/* <div>\r\n            text value: {this.state.value} \r\n\r\n            </div> */}\r\n\r\n            <div>\r\n\r\n              slider value: {this.state.sliderValue}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CalibrationPage;","import firebase from \"./services/firebase\";\r\nimport React, { Component, useState } from \"react\";\r\nimport Slider, { Range } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nconst db = firebase.collection(\"/BGU-lab-dev\");\r\n\r\nclass LongTestPage extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      testCouner: 0,\r\n      sliderValue:0,\r\n\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n\r\n    \r\n\r\n  }\r\n  componentDidMount() {\r\n    this.unsubscribe = firebase.collection('/slider-data').onSnapshot(this.onCollectionUpdate) \r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\r\n    this.unsubscribe()\r\n  }\r\n\r\n  \r\n  onCollectionUpdate = (querySnapshot) => {\r\n    // we have to update the state\r\n    let value = 0;\r\n    querySnapshot.forEach((document) => {\r\n      const doc= document.data();\r\n      console.log(doc)\r\n      value = doc.value\r\n    })\r\n    this.setState({value:value, sliderValue:value})\r\n\r\n  }\r\n\r\n\r\n\r\n  getData() {\r\n    let value;\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).get().\r\n        then( docSnapshot => {\r\n          [docSnapshot].forEach( doc => {\r\n            const data = doc.data();\r\n            console.log(doc.id, data);\r\n            console.log(`sliderID: ${data.id}, value: ${data.value}`)\r\n            value =  data.value;\r\n          })\r\n\r\n        })\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n    console.log(value)\r\n    return value\r\n  }\r\n\r\n\r\n\r\n  create(tutorial) {\r\n    return db.add(tutorial);\r\n  }\r\n\r\n\r\n\r\n  update( input) {\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).update({value:input})\r\n        // thisRef.setState({value:input},\r\n        //    ()=>console.log(`updated value:`+ input) )\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n  }\r\n\r\n  addTestScoreToDoc2(input){\r\n         db.orderBy('time', 'desc').limit(1).get().\r\n            then((data) =>{\r\n              const docRef = data.docs[0];\r\n              const docData = docRef.data()\r\n              const docID = docRef.id\r\n              let dataToUpdate = docData[\"calibrationTests\"]\r\n\r\n              let scoreCounter = `כאב ארוך ${this.state.testCouner}`\r\n              this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n              let newData ={testNum : ` כאב ארוך  ${this.state.testCouner}`, value:input }\r\n              //newData[scoreCounter] = input\r\n              dataToUpdate.push(newData)\r\n              const docRefUpdate = db.doc(docRef.id);\r\n              docRefUpdate.update({calibrationTests: dataToUpdate})\r\n\r\n\r\n            } \r\n            )\r\n  }\r\n  // addTestScoreToDoc(input){\r\n  //   const docRef = db.doc(this.props.docRefID);\r\n  //   let scoreCounter = `כיול ${this.state.testCouner}`\r\n  //   this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n  //   let newData ={}\r\n  //   newData[scoreCounter] = input\r\n  //   let docData = docRef.get().then((doc) =>  {\r\n  //     let data = doc.id\r\n  //     console.log(\"wowowow \" + data.id )}\r\n  //   )\r\n    \r\n  //   // let toUdpate = docRef.calibrationTests\r\n  //   // toUdpate.push(newData)\r\n  //   // docRef.update(\r\n  //   //   {calibrationTests: toUdpate}\r\n  //   // )\r\n\r\n\r\n  //       //docRef.update(newData)\r\n\r\n  //   console.log(`added score: ${input}`)\r\n  // }\r\n\r\n \r\n    \r\n  handleChange(event) {\r\n    this.setState({input: event.target.value}, ()=>{\r\n        //this.update(event.target.value,this)\r\n      });\r\n    }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    //this.update(this.state.sliderValue)\r\n    this.addTestScoreToDoc2(this.state.sliderValue)\r\n    this.setState({sliderValue:0})\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  handleReset(event) {\r\n    event.preventDefault();\r\n    //this.setState({sliderValue:0})\r\n    this.setState({sliderValue:0})\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  // async getSliderValue(){\r\n  //   const docRef =  firebase.collection(\"/slider-data\").doc('hIGjEMjhpHO604ed6VKp')\r\n  //   const doc = await docRef.get()\r\n  //   if(!doc.exists){\r\n  //     console.log(\"ERROR! doc doesnt exsits on firestore\")\r\n  //     return 0;\r\n  //   }\r\n  //   else{\r\n  //       const val = doc.data().value;\r\n  //       this.setState({value:val})\r\n  //       console.log(val)\r\n  //       return val;\r\n  //   }\r\n  // }\r\n  delete(id) {\r\n    return db.doc(id).delete();\r\n  }\r\n\r\n  onSliderChange = value => {\r\n    this.setState(\r\n      {\r\n        sliderValue:value\r\n      },\r\n      () => {\r\n        console.log(this.state.sliderValue);\r\n      }\r\n    );\r\n  };\r\n\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col>\r\n          <form >\r\n          {/* <label>\r\n            Name:\r\n            <input type=\"text\" value={this.state.input} onChange={this.handleChange} />\r\n          </label> */}\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Submit\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleReset}>\r\n              Reset\r\n          </Button>\r\n\r\n        </form>\r\n   \r\n\r\n\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col style = {{width:\"200px\"}}>\r\n\r\n              <div >\r\n              <Slider\r\n              min={0}\r\n              max={10}\r\n              defaultValue={0}\r\n              value={this.state.sliderValue}\r\n              onChange={this.onSliderChange}\r\n\r\n\r\n              />\r\n            </div>\r\n\r\n            {/* <div>\r\n            text value: {this.state.value} \r\n\r\n            </div> */}\r\n\r\n            <div>\r\n\r\n              slider value: {this.state.sliderValue}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LongTestPage;","import React, { Component , useState} from 'react';\r\n\r\nimport CalibrationPage from './CalibrationPage'\r\nimport LongTestPage from './LongTestPage'\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams\r\n  } from \"react-router-dom\";\r\n\r\nimport dateFormat from 'dateformat';\r\n\r\n\r\nconst ExperimenterPage = (props) => {\r\n\r\n    let { path, url } = useRouteMatch();\r\n    const [startExperiment, setExpirmentStatus] = useState(false);\r\n    const [expirementerDoc, setExpirementerDoc] = useState()\r\n\r\n    function initNewDocument(){\r\n        const db = props.db;\r\n        console.log(db)\r\n        db.add({\r\n            fullname: \"ישראל ישראלי\",\r\n            calibrationTests: [],\r\n            longTests: [],\r\n            time:dateFormat(new Date(), \"yyyy-mm-dd HH:MM:ss\"),\r\n          }).then(docRef => {\r\n              console.log('new doc ref: ' + docRef.id);\r\n              setExpirementerDoc(docRef.id)\r\n              props.sendDocRefToParent(docRef.id)\r\n\r\n          }) \r\n\r\n\r\n        // console.log(\"new doc: \" + expirementerDoc +  \"\\n end of doc\")\r\n        // console.log(\"docRef: \" + resRef)\r\n    }\r\n\r\n    \r\n\r\n        return (\r\n            <div>\r\n                <h2>\r\n                    Memu - Experimenter Page \r\n\r\n                </h2>\r\n                {\r\n                    \r\n                }\r\n                <Row>\r\n                    <Col>\r\n\r\n                    {\r\n                        !startExperiment  ? \r\n                        <Row>\r\n                            <Col>\r\n                                <Button onClick = {()=> {\r\n                                    setExpirmentStatus(true);\r\n                                    initNewDocument()\r\n                                    }}> \r\n                                   התחל ניסוי עבור נסיין חדש\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        :\r\n                        <Router>\r\n                        <div>\r\n                        <h3>אנא בחר שלב בניסוי</h3>\r\n\r\n                                {/* <Link to=\"/\">Home</Link> */}\r\n                                <Link to=\"/expirementer/calibration\">\r\n                                    <Button variant=\"outline-primary\">\r\n\r\n                                    כיול כאב\r\n                                    </Button>\r\n\r\n                                </Link>\r\n\r\n                                <Link to=\"/expirementer/longExp\">\r\n                                    <Button variant=\"outline-primary\">\r\n                                    כאב ארוך\r\n                                    </Button >\r\n\r\n                                </Link>\r\n\r\n\r\n\r\n\r\n\r\n                            <Switch>\r\n                                <Route exact path={path}>\r\n                                </Route>\r\n                                <Route path=\"/expirementer/calibration\">\r\n                                 <CalibTest docRefID = {expirementerDoc}/>\r\n                                </Route>\r\n\r\n                                <Route path=\"/expirementer/longExp\">\r\n                                 <LongTest docRefID = {expirementerDoc} />\r\n                                </Route>\r\n\r\n                                {/* <Route path=\"/\">\r\n                                </Route> */}\r\n                            </Switch>\r\n                        </div>\r\n                    </Router>\r\n                    }\r\n                   \r\n                    </Col>\r\n                </Row>\r\n  \r\n\r\n             \r\n            </div>\r\n        );\r\n    \r\n}\r\n\r\nfunction CalibTest(props) {\r\n    // The <Route> that rendered this component has a\r\n    // path of `/topics/:topicId`. The `:topicId` portion\r\n    // of the URL indicates a placeholder that we can\r\n    // get from `useParams()`.\r\n    let { topicId } = useParams();\r\n  \r\n    return (\r\n      <div>\r\n        <h3>{topicId}</h3>\r\n\r\n        <h3>\r\n                כיול כאב\r\n            </h3>\r\n\r\n            <div>\r\n\r\n            <Row>\r\n                    <Col>\r\n                        <CalibrationPage  docRefID = {props.docRefID}/>\r\n                    </Col>\r\n            </Row>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function LongTest(props) {\r\n    // The <Route> that rendered this component has a\r\n    // path of `/topics/:topicId`. The `:topicId` portion\r\n    // of the URL indicates a placeholder that we can\r\n    // get from `useParams()`.\r\n    let { topicId } = useParams();\r\n  \r\n    return (\r\n      <div>\r\n        <h3>{topicId}</h3>\r\n\r\n        <h3>\r\n               כאב ארוך\r\n            </h3>\r\n\r\n            <div>\r\n\r\n            <Row>\r\n                    <Col>\r\n                        <LongTestPage  docRefID = {props.docRefID} />\r\n                    </Col>\r\n            </Row>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n\r\nexport default ExperimenterPage;","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component, useState } from \"react\";\nimport ReactGA from 'react-ga';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nimport firebase from \"./services/firebase\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Button,\n  Container,\n  Row,\n  Col\n} from \"react-bootstrap\";\nimport ManagerPage from './ManagerPage';\nimport ExperimenterPage from './ExperimenterPage'\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      db: firebase.collection(\"/BGU-lab-dev\"),\n      activeDocRef: undefined,\n\n    };\n\n    const db = firebase.settings({\n        timestampsInSnapshots: true\n      });\n\n\n    const trackingId = \"UA-180348020-1\"; \n    ReactGA.initialize(trackingId, {\n      debug: true\n    });\n    ReactGA.pageview(window.location.pathname + window.location.search);\n\n  }\n\n  getDocRefFromChild = (docRef) =>{\n    console.log(`recibed from child: ${docRef}`)\n    this.setState({activeDocRef:docRef})\n  }\n\n  componentDidMount() {\n    this.unsubscribe = firebase.collection('/BGU-lab-dev').onSnapshot(this.onCollectionUpdate) \n\n  }\n\n  componentWillUnmount() {\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\n    this.unsubscribe()\n  }\n\n\n  render(){\n    return (\n      <Container className=\"App\">\n        <Row>\n          <Col>\n              <Router>\n                <div>\n                  <nav>\n\n                          <Link to=\"/\">\n                            <Button variant=\"outline-primary\">\n                            Home\n                            </Button>\n                          </Link>\n\n                          <Link to=\"/manager\">\n                            <Button variant=\"outline-primary\">\n                              manager\n                            </Button>\n                            </Link>\n\n                          <Link to=\"/expirementer\">\n                            <Button variant=\"outline-primary\">\n                            expirementer\n                            </Button>\n\n                          </Link>\n\n                  </nav>\n\n                  {/* A <Switch> looks through its children <Route>s and\n                      renders the first one that matches the current URL. */}\n                  <Switch>\n                    <Route path=\"/manager\">\n                      <ManagerPage db = {this.state.db} docRef = {this.state.activeDocRef} />\n                    </Route>\n                    <Route path=\"/expirementer\">\n                      <ExperimenterPage  db = {this.state.db} sendDocRefToParent = {this.getDocRefFromChild}/>\n                    </Route>\n                    <Route path=\"/\">\n                    </Route>\n                  </Switch>\n                </div>\n            </Router>\n          </Col>\n        </Row>\n   \n\n\n      </Container>\n    );\n  }\n  \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}