{"version":3,"sources":["logo.svg","services/firebase.js","ManagerPage.js","CalibrationPage.js","LongTestPage.js","ExpPage2.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","ManagerPage","props","useState","experimemtDocID","setExpirementerDoc","setExpirementerName","experimemtTime","setExpirementTime","experimentUpdatingData","setExpData","setAsLoaded","dataRenderedasList","setRenderData","setNewDocAlarm","getLateseDocID","db","orderBy","limit","get","then","data","docRef","docs","docData","docID","id","time","split","onCollectionUpdate","console","log","undefined","doc","onSnapshot","docSnapshot","renderData3","err","list","calibTest","forEach","item","testNum","value","push","useEffect","Row","Col","Button","variant","onClick","add","fullname","calibrationTests","longTests","dateFormat","Date","initNewDocument","collection","CalibrationPage","querySnapshot","document","setState","sliderValue","onSliderChange","state","testCouner","handleChange","bind","handleSubmit","handleReset","this","unsubscribe","snapshot","childSnapshot","tutorial","input","update","dataToUpdate","prevState","newData","event","target","preventDefault","addTestScoreToDoc2","exists","val","delete","style","width","min","max","defaultValue","onChange","step","reverse","railStyle","backgroundColor","height","trackStyle","handleStyle","borderColor","marginLeft","marginTop","Component","LongTestPage","CalibTest","docRefID","LongTest","ExpPage2","startExperiment","setExpirmentStatus","expirementerDoc","activeTab","changeTab","Navbar","marginRight","Nav","className","Link","href","active","App","getDocRefFromChild","activeDocRef","settings","timestampsInSnapshots","ReactGA","initialize","debug","pageview","window","location","pathname","search","tab","Container","fluid","sendDocRefToParent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f6947e8d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import firebase from \"firebase\";\r\n\r\nconst config = {\r\n\r\n    apiKey: \"AIzaSyA3Jx8S_Yh6vdOI9RRP1ybnuG_Kvox093g\",\r\n    authDomain: \"slider-app1.firebaseapp.com\",\r\n    databaseURL: \"https://slider-app1.firebaseio.com\",\r\n    projectId: \"slider-app1\",\r\n    storageBucket: \"slider-app1.appspot.com\",\r\n    messagingSenderId: \"813536171331\",\r\n    appId: \"1:813536171331:web:ee4f67d30e6b1f45c48bf6\",\r\n    measurementId: \"G-2PMF6CRJ79\"\r\n }\r\n\r\n//!firebase.apps.length ? firebase.initializeApp(config) : null;\r\nfirebase.initializeApp(config);\r\n\r\n export default  firebase.firestore();\r\n","import React, { useState , useEffect} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n\r\n} from \"react-bootstrap\";\r\nimport firebase from \"./services/firebase\";\r\n\r\nimport dateFormat from 'dateformat';\r\n\r\n\r\n\r\n const ManagerPage = (props) => {\r\n\r\n        const [experimemtDocID, setExpirementerDoc] = useState();\r\n        const [experimemterName, setExpirementerName] = useState(\"\");\r\n        const [experimemtTime, setExpirementTime] = useState(\"\");\r\n        const [experimentUpdatingData, setExpData] = useState()\r\n        const [dataAsLsit, setDataAsList] = useState([])\r\n        const [loaded, setAsLoaded] = useState(false)\r\n        const [dataRenderedasList, setRenderData] = useState([])\r\n        const [newDocAlarm, setNewDocAlarm] = useState(false)\r\n\r\n    useEffect(() => { \r\n        console.log (\"IN USE EFFECT\")\r\n        const db = props.db\r\n        db.orderBy('time', 'desc').limit(1).get().\r\n           then((data) =>{\r\n               const docRef = data.docs[0];\r\n               const docData = docRef.data()\r\n               const docID = docRef.id\r\n               setExpirementerDoc(docID)\r\n               setExpData(data)\r\n               setExpirementerName(docData[\"fullname\"])\r\n               const time = docData.time.split(\" \")[1].split(\":\")\r\n               setExpirementTime(time[0] + \":\" + time[1])\r\n               setAsLoaded(true)\r\n               onCollectionUpdate()\r\n\r\n               renderData3()\r\n\r\n           } \r\n           )\r\n\r\n\r\n        //remember to unsubscribe from your realtime listener on unmount or you will create a memory leak\r\n        return () => undefined\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n     function getLateseDocID(){\r\n        const db = props.db\r\n         db.orderBy('time', 'desc').limit(1).get().\r\n            then((data) =>{\r\n                const docRef = data.docs[0];\r\n                const docData = docRef.data()\r\n                const docID = docRef.id\r\n                setExpirementerDoc(docID)\r\n                setExpirementerName(docData[\"fullname\"])\r\n                const time = docData.time.split(\" \")[1].split(\":\")\r\n\r\n                setExpirementTime(time[0] + \":\" + time[1])\r\n                setAsLoaded(true)\r\n\r\n                onCollectionUpdate()\r\n                setNewDocAlarm(false)\r\n                // renderData3()\r\n\r\n\r\n            } \r\n            )\r\n\r\n    }\r\n   \r\n\r\n     function onCollectionUpdate() {\r\n         console.log(\"update: \" +experimemtDocID)\r\n         if(experimemtDocID != undefined){\r\n            const doc = props.db.doc(experimemtDocID)\r\n            console.log('doc updated!' + experimemtDocID)\r\n\r\n            const observer = doc.onSnapshot(docSnapshot => {\r\n                const data = docSnapshot.data();\r\n                console.log(`Received doc snapshot:${docSnapshot.id} ${data}`);\r\n               // console.log(data)\r\n                setExpData(data)\r\n                renderData3()\r\n                // ...\r\n              }, err => {\r\n                console.log(`Encountered error: ${err}`);\r\n              });\r\n\r\n         }\r\n        \r\n\r\n      }\r\n\r\n\r\n\r\n      function renderData3(){\r\n        if(experimentUpdatingData){\r\n            console.log(\"rendering new data\")\r\n\r\n            const doc = props.db.doc(experimemtDocID)\r\n            console.log('doc updated!' + experimemtDocID)\r\n\r\n            const observer = doc.onSnapshot(docSnapshot => {\r\n                const data = docSnapshot.data();\r\n                console.log(`Received doc snapshot:${docSnapshot.id} ${data}`);\r\n               // console.log(data)\r\n                let list = []\r\n                let calibTest = data[\"calibrationTests\"]\r\n                console.log('calib: ')\r\n                console.log( calibTest)\r\n                calibTest.forEach( (item) => {\r\n                    console.log(`${item.testNum} : ${item.value}`)\r\n                    list.push(\r\n                        <li >\r\n                        {item.testNum} : {item.value}\r\n                        </li>\r\n                    )\r\n                })\r\n                setRenderData(list);\r\n\r\n                // ...\r\n              }, err => {\r\n                console.log(`Encountered error: ${err}`);\r\n              });\r\n            \r\n            console.log(\"hiiiiii\" ) \r\n\r\n        }\r\n  \r\n      }\r\n\r\n      function sortByKey(array, key) {\r\n        let ans =  array.sort(function(a, b) {\r\n            var x = a[key]; var y = b[key];\r\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n        });\r\n        return ans\r\n    }\r\n    \r\n\r\n    function initNewDocument(){\r\n        const db = props.db;\r\n        console.log(db)\r\n        db.add({\r\n            fullname: \"ישראל ישראלי\",\r\n            calibrationTests: [],\r\n            longTests: [],\r\n            time:dateFormat(new Date(), \"yyyy-mm-dd HH:MM:ss\"),\r\n          }).then(docRef => {\r\n              console.log('new doc ref: ' + docRef.id);\r\n            //   setExpirementerDoc(docRef.id)\r\n\r\n          }) \r\n\r\n          setNewDocAlarm(true);\r\n          getLateseDocID()\r\n\r\n\r\n        // console.log(\"new doc: \" + expirementerDoc +  \"\\n end of doc\")\r\n        // console.log(\"docRef: \" + resRef)\r\n    }\r\n\r\n\r\n\r\n    function continuteLastDocument(){\r\n        console.log (\"IN USE EFFECT\")\r\n        const db = props.db\r\n        db.orderBy('time', 'desc').limit(1).get().\r\n           then((data) =>{\r\n               const docRef = data.docs[0];\r\n            //    const docData = docRef.data()\r\n            //    const docID = docRef.id\r\n            //    setExpirementerDoc(docRef.id)\r\n\r\n\r\n           }\r\n           )\r\n        \r\n    }\r\n\r\n    \r\n        return (\r\n            <div>\r\n                <h3>דף מנהל</h3>\r\n                {/* <h6>שם הנסיין: {experimemterName} </h6> */}\r\n                <h6>זמן תחילת הניסוי: {experimemtTime} </h6>\r\n\r\n            \r\n                <Row>\r\n                        <Col>\r\n                            <Button variant=\"primary\"\r\n                                onClick = {()=> {\r\n                                initNewDocument()\r\n                                }}> \r\n                                התחל ניסוי עבור נסיין חדש\r\n                            </Button>\r\n                            | \r\n\r\n                            <Button variant=\"success\"\r\n                                onClick={getLateseDocID}>\r\n                                הצג פרטי ניסוי נוכחי\r\n                            </Button>\r\n\r\n                            |\r\n\r\n                            <Button  variant=\"success\"\r\n                                onClick = {()=> {\r\n                                    continuteLastDocument()\r\n                                    }}\r\n                                >\r\n                                המשך ניסוי אחרון\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n\r\n\r\n                <div>\r\n                    <ul>\r\n\r\n                        {\r\n                     \r\n\r\n                                dataRenderedasList\r\n                                \r\n                \r\n                        }\r\n                    \r\n\r\n                    </ul>\r\n\r\n                    {\r\n                     \r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default ManagerPage;","import firebase from \"./services/firebase\";\r\nimport React, { Component, useState } from \"react\";\r\nimport Slider, { Range } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nconst db = firebase.collection(\"/BGU-lab-dev\");\r\n\r\nclass CalibrationPage extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      testCouner: 0,\r\n      sliderValue: 0,\r\n\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n\r\n    \r\n\r\n  }\r\n  componentDidMount() {\r\n    this.unsubscribe = firebase.collection('/slider-data').onSnapshot(this.onCollectionUpdate) \r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\r\n    this.unsubscribe()\r\n  }\r\n\r\n  \r\n  onCollectionUpdate = (querySnapshot) => {\r\n    // we have to update the state\r\n    let value = 0;\r\n    querySnapshot.forEach((document) => {\r\n      const doc= document.data();\r\n      console.log(doc)\r\n      value = doc.value\r\n    })\r\n    this.setState({value:value, sliderValue:value})\r\n\r\n  }\r\n\r\n\r\n\r\n  getData() {\r\n    let value;\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).get().\r\n        then( docSnapshot => {\r\n          [docSnapshot].forEach( doc => {\r\n            const data = doc.data();\r\n            console.log(doc.id, data);\r\n            console.log(`sliderID: ${data.id}, value: ${data.value}`)\r\n            value =  data.value;\r\n          })\r\n\r\n        })\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n    console.log(value)\r\n    return value\r\n  }\r\n\r\n\r\n\r\n  create(tutorial) {\r\n    return db.add(tutorial);\r\n  }\r\n\r\n\r\n\r\n  update( input) {\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).update({value:input})\r\n        // thisRef.setState({value:input},\r\n        //    ()=>console.log(`updated value:`+ input) )\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n  }\r\n\r\n  addTestScoreToDoc2(input){\r\n         db.orderBy('time', 'desc').limit(1).get().\r\n            then((data) =>{\r\n              const docRef = data.docs[0];\r\n              const docData = docRef.data()\r\n              const docID = docRef.id\r\n              let dataToUpdate = docData[\"calibrationTests\"]\r\n\r\n              let scoreCounter = `כיול ${this.state.testCouner}`\r\n              this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n              let newData ={testNum : ` כיול ${this.state.testCouner}`, value:input }\r\n              //newData[scoreCounter] = input\r\n              dataToUpdate.push(newData)\r\n              const docRefUpdate = db.doc(docRef.id);\r\n              docRefUpdate.update({calibrationTests: dataToUpdate})\r\n\r\n\r\n            } \r\n            )\r\n  }\r\n  // addTestScoreToDoc(input){\r\n  //   const docRef = db.doc(this.props.docRefID);\r\n  //   let scoreCounter = `כיול ${this.state.testCouner}`\r\n  //   this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n  //   let newData ={}\r\n  //   newData[scoreCounter] = input\r\n  //   let docData = docRef.get().then((doc) =>  {\r\n  //     let data = doc.id\r\n  //     console.log(\"wowowow \" + data.id )}\r\n  //   )\r\n    \r\n  //   // let toUdpate = docRef.calibrationTests\r\n  //   // toUdpate.push(newData)\r\n  //   // docRef.update(\r\n  //   //   {calibrationTests: toUdpate}\r\n  //   // )\r\n\r\n\r\n  //       //docRef.update(newData)\r\n\r\n  //   console.log(`added score: ${input}`)\r\n  // }\r\n\r\n \r\n    \r\n  handleChange(event) {\r\n    this.setState({input: event.target.value}, ()=>{\r\n        this.update(event.target.value,this)\r\n      });\r\n    }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    //this.update(this.state.sliderValue)\r\n    this.addTestScoreToDoc2(this.state.sliderValue)\r\n    this.setState({sliderValue:0})\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  handleReset(event) {\r\n    event.preventDefault();\r\n    //this.setState({sliderValue:0})\r\n    this.setState({sliderValue:0})\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  async getSliderValue(){\r\n    const docRef =  firebase.collection(\"/slider-data\").doc('hIGjEMjhpHO604ed6VKp')\r\n    const doc = await docRef.get()\r\n    if(!doc.exists){\r\n      console.log(\"ERROR! doc doesnt exsits on firestore\")\r\n      return 0;\r\n    }\r\n    else{\r\n        const val = doc.data().value;\r\n        this.setState({value:val})\r\n        console.log(val)\r\n        return val;\r\n    }\r\n  }\r\n  delete(id) {\r\n    return db.doc(id).delete();\r\n  }\r\n\r\n  onSliderChange = value => {\r\n    this.setState(\r\n      {\r\n        sliderValue:value\r\n      },\r\n      () => {\r\n        console.log(this.state.sliderValue);\r\n      }\r\n    );\r\n  };\r\n\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col>\r\n          <form >\r\n          {/* <label>\r\n            Name:\r\n            <input type=\"text\" value={this.state.input} onChange={this.handleChange} />\r\n          </label> */}\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Submit\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleReset}>\r\n              Reset\r\n          </Button>\r\n\r\n        </form>\r\n   \r\n\r\n\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col style = {{width:\"200px\"}}>\r\n\r\n              <div >\r\n              <Slider\r\n              min={0}\r\n              max={10}\r\n              defaultValue={0}\r\n              value={this.state.sliderValue}\r\n              onChange={this.onSliderChange}\r\n              step ={0.1}\r\n              reverse = {true}\r\n              railStyle={{ backgroundColor: 'grey', height: 200 }}\r\n              trackStyle={{ backgroundColor: 'red', height: 200 }}\r\n              handleStyle={{\r\n                borderColor: 'black',\r\n                height: 200,\r\n                width: 20,\r\n                marginLeft: -14,\r\n                marginTop: 0,\r\n                backgroundColor: 'white',\r\n              }}\r\n\r\n\r\n              />\r\n            </div>\r\n\r\n            {/* <div>\r\n            text value: {this.state.value} \r\n\r\n            </div> */}\r\n\r\n            <div>\r\n\r\n              {/* slider value: {this.state.sliderValue} */}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default CalibrationPage;","import firebase from \"./services/firebase\";\r\nimport React, { Component, useState } from \"react\";\r\nimport Slider, { Range } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nconst db = firebase.collection(\"/BGU-lab-dev\");\r\n\r\nclass LongTestPage extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      testCouner: 0,\r\n      sliderValue:0,\r\n\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n\r\n    \r\n\r\n  }\r\n  componentDidMount() {\r\n    this.unsubscribe = firebase.collection('/slider-data').onSnapshot(this.onCollectionUpdate) \r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\r\n    this.unsubscribe()\r\n  }\r\n\r\n  \r\n  onCollectionUpdate = (querySnapshot) => {\r\n    // we have to update the state\r\n    let value = 0;\r\n    querySnapshot.forEach((document) => {\r\n      const doc= document.data();\r\n      console.log(doc)\r\n      value = doc.value\r\n    })\r\n    this.setState({value:value, sliderValue:value})\r\n\r\n  }\r\n\r\n\r\n\r\n  getData() {\r\n    let value;\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).get().\r\n        then( docSnapshot => {\r\n          [docSnapshot].forEach( doc => {\r\n            const data = doc.data();\r\n            console.log(doc.id, data);\r\n            console.log(`sliderID: ${data.id}, value: ${data.value}`)\r\n            value =  data.value;\r\n          })\r\n\r\n        })\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n    console.log(value)\r\n    return value\r\n  }\r\n\r\n\r\n\r\n  create(tutorial) {\r\n    return db.add(tutorial);\r\n  }\r\n\r\n\r\n\r\n  update( input) {\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).update({value:input})\r\n        // thisRef.setState({value:input},\r\n        //    ()=>console.log(`updated value:`+ input) )\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n  }\r\n\r\n  addTestScoreToDoc2(input){\r\n         db.orderBy('time', 'desc').limit(1).get().\r\n            then((data) =>{\r\n              const docRef = data.docs[0];\r\n              const docData = docRef.data()\r\n              const docID = docRef.id\r\n              let dataToUpdate = docData[\"calibrationTests\"]\r\n\r\n              let scoreCounter = `כאב ארוך ${this.state.testCouner}`\r\n              this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n              let newData ={testNum : ` כאב ארוך  ${this.state.testCouner}`, value:input }\r\n              //newData[scoreCounter] = input\r\n              dataToUpdate.push(newData)\r\n              const docRefUpdate = db.doc(docRef.id);\r\n              docRefUpdate.update({calibrationTests: dataToUpdate})\r\n\r\n\r\n            } \r\n            )\r\n  }\r\n  // addTestScoreToDoc(input){\r\n  //   const docRef = db.doc(this.props.docRefID);\r\n  //   let scoreCounter = `כיול ${this.state.testCouner}`\r\n  //   this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n  //   let newData ={}\r\n  //   newData[scoreCounter] = input\r\n  //   let docData = docRef.get().then((doc) =>  {\r\n  //     let data = doc.id\r\n  //     console.log(\"wowowow \" + data.id )}\r\n  //   )\r\n    \r\n  //   // let toUdpate = docRef.calibrationTests\r\n  //   // toUdpate.push(newData)\r\n  //   // docRef.update(\r\n  //   //   {calibrationTests: toUdpate}\r\n  //   // )\r\n\r\n\r\n  //       //docRef.update(newData)\r\n\r\n  //   console.log(`added score: ${input}`)\r\n  // }\r\n\r\n \r\n    \r\n  handleChange(event) {\r\n    this.setState({input: event.target.value}, ()=>{\r\n        //this.update(event.target.value,this)\r\n      });\r\n    }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    //this.update(this.state.sliderValue)\r\n    this.addTestScoreToDoc2(this.state.sliderValue)\r\n    this.setState({sliderValue:0})\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  handleReset(event) {\r\n    event.preventDefault();\r\n    //this.setState({sliderValue:0})\r\n    this.setState({sliderValue:0})\r\n    //this.getSliderValue()\r\n\r\n  }\r\n\r\n  // async getSliderValue(){\r\n  //   const docRef =  firebase.collection(\"/slider-data\").doc('hIGjEMjhpHO604ed6VKp')\r\n  //   const doc = await docRef.get()\r\n  //   if(!doc.exists){\r\n  //     console.log(\"ERROR! doc doesnt exsits on firestore\")\r\n  //     return 0;\r\n  //   }\r\n  //   else{\r\n  //       const val = doc.data().value;\r\n  //       this.setState({value:val})\r\n  //       console.log(val)\r\n  //       return val;\r\n  //   }\r\n  // }\r\n  delete(id) {\r\n    return db.doc(id).delete();\r\n  }\r\n\r\n  onSliderChange = value => {\r\n    this.setState(\r\n      {\r\n        sliderValue:value\r\n      },\r\n      () => {\r\n        console.log(this.state.sliderValue);\r\n      }\r\n    );\r\n  };\r\n\r\n  \r\n  render(){\r\n    return (\r\n      <div>\r\n        <Row>\r\n          <Col>\r\n          <form >\r\n          {/* <label>\r\n            Name:\r\n            <input type=\"text\" value={this.state.input} onChange={this.handleChange} />\r\n          </label> */}\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleSubmit}\r\n          >\r\n            Submit\r\n          </Button>\r\n\r\n          <Button\r\n            variant=\"outline-primary\"\r\n            onClick={this.handleReset}>\r\n              Reset\r\n          </Button>\r\n\r\n        </form>\r\n   \r\n\r\n\r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col style = {{width:\"200px\"}}>\r\n\r\n          <div >\r\n              <Slider\r\n              min={0}\r\n              max={10}\r\n              defaultValue={0}\r\n              value={this.state.sliderValue}\r\n              onChange={this.onSliderChange}\r\n              step ={0.1}\r\n              reverse = {true}\r\n              railStyle={{ backgroundColor: 'grey', height: 200 }}\r\n              trackStyle={{ backgroundColor: 'red', height: 200 }}\r\n              handleStyle={{\r\n                borderColor: 'black',\r\n                height: 200,\r\n                width: 20,\r\n                marginLeft: -14,\r\n                marginTop: 0,\r\n                backgroundColor: 'white',\r\n              }}\r\n\r\n\r\n              />\r\n            </div>\r\n\r\n            {/* <div>\r\n            text value: {this.state.value} \r\n\r\n            </div> */}\r\n\r\n            <div>\r\n\r\n              slider value: {this.state.sliderValue}\r\n            </div>\r\n          </Col>\r\n        </Row>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default LongTestPage;","import React, { Component , useState} from 'react';\r\n\r\nimport CalibrationPage from './CalibrationPage'\r\nimport LongTestPage from './LongTestPage'\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Navbar,\r\n  Nav\r\n} from \"react-bootstrap\";\r\n\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams,\r\n\r\n  } from \"react-router-dom\";\r\n\r\nimport dateFormat from 'dateformat';\r\n\r\n\r\nconst ExpPage2 = (props) => {\r\n\r\n    // let { path, url } = useRouteMatch();\r\n    const [startExperiment, setExpirmentStatus] = useState(false);\r\n    const [expirementerDoc, setExpirementerDoc] = useState()\r\n    const [activeTab,changeTab] = useState(\"start\")\r\n\r\n    function initNewDocument(){\r\n        const db = props.db;\r\n        console.log(db)\r\n        db.add({\r\n            fullname: \"ישראל ישראלי\",\r\n            calibrationTests: [],\r\n            longTests: [],\r\n            time:dateFormat(new Date(), \"yyyy-mm-dd HH:MM:ss\"),\r\n          }).then(docRef => {\r\n              console.log('new doc ref: ' + docRef.id);\r\n              setExpirementerDoc(docRef.id)\r\n              props.sendDocRefToParent(docRef.id)\r\n\r\n          }) \r\n\r\n\r\n        // console.log(\"new doc: \" + expirementerDoc +  \"\\n end of doc\")\r\n        // console.log(\"docRef: \" + resRef)\r\n    }\r\n\r\n    function continuteLastDocument(){\r\n        console.log (\"IN USE EFFECT\")\r\n        const db = props.db\r\n        db.orderBy('time', 'desc').limit(1).get().\r\n           then((data) =>{\r\n               const docRef = data.docs[0];\r\n            //    const docData = docRef.data()\r\n            //    const docID = docRef.id\r\n               setExpirementerDoc(docRef.id)\r\n\r\n\r\n           }\r\n           )\r\n        \r\n    }\r\n\r\n\r\n    \r\n\r\n        return (\r\n\r\n                <Row>\r\n                    <Col>\r\n                    <h2>\r\n                    דף נסיין \r\n\r\n                </h2>\r\n\r\n                    {\r\n                        !startExperiment  ? \r\n                        <Row>\r\n                            <Col>\r\n                                {/* <Button variant=\"primary\"\r\n                                 onClick = {()=> {\r\n                                    setExpirmentStatus(true);\r\n                                    initNewDocument()\r\n                                    }}> \r\n                                   התחל ניסוי עבור נסיין חדש\r\n                                </Button>\r\n                                */}\r\n\r\n                                <Button  variant=\"success\"\r\n                                    onClick = {()=> {\r\n                                        setExpirmentStatus(true);\r\n                                        continuteLastDocument()\r\n                                        }}\r\n                                    >\r\n                                    המשך ניסוי אחרון\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        :\r\n                        <Row>\r\n                            <Col>\r\n\r\n                               <Row>\r\n                                    <Col>\r\n                                    <Navbar   style = {{ marginLeft: \"auto\", marginRight:\"auto\", width :\"50%\"}} >\r\n                                    <Nav className=\"mx-auto justify-content-center\">\r\n                                        <Nav.Link\r\n                                            href=\"\"\r\n                                            className=\"px-4\"\r\n                                            onClick={() => changeTab(\"LongTest\")}\r\n                                            active={activeTab === \"LongTest\"}\r\n                                            >\r\n                                            ניסוי ארוך\r\n                                        </Nav.Link>\r\n                                        </Nav>\r\n\r\n                                        <Nav>\r\n                                        <Nav.Link\r\n                                            href=\"\"\r\n                                            className=\"px-4\"\r\n                                            onClick={() => changeTab(\"Calibration\")}\r\n                                            active={activeTab === \"Calibration\"}\r\n                                            >\r\n                                            כיול כאב\r\n                                        </Nav.Link>\r\n                                        </Nav>\r\n\r\n                                        </Navbar>\r\n                                    </Col>\r\n\r\n                               </Row>\r\n\r\n                               <Row>\r\n                                   <Col>\r\n\r\n                                        {\r\n                                            activeTab === \"start\" ? <h3> מיד נתחיל בניסוי </h3> :\r\n                                            activeTab === \"Calibration\" ? <CalibTest docRefID = {expirementerDoc}></CalibTest> :\r\n                                                                            <LongTest docRefID = {expirementerDoc} />\r\n\r\n                                        }\r\n\r\n\r\n                                </Col>\r\n\r\n                               </Row>\r\n\r\n\r\n                               </Col>\r\n                        </Row>\r\n                    }\r\n                   \r\n                    </Col>\r\n                </Row>\r\n  \r\n\r\n             \r\n        );\r\n    \r\n}\r\n\r\nfunction CalibTest(props) {\r\n    // The <Route> that rendered this component has a\r\n    // path of `/topics/:topicId`. The `:topicId` portion\r\n    // of the URL indicates a placeholder that we can\r\n    // get from `useParams()`.\r\n  \r\n    return (\r\n      <div>\r\n\r\n        <h3>\r\n                כיול כאב\r\n            </h3>\r\n\r\n            <div>\r\n\r\n            <Row>\r\n                    <Col>\r\n                        <CalibrationPage  docRefID = {props.docRefID}/>\r\n                    </Col>\r\n            </Row>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function LongTest(props) {\r\n    // The <Route> that rendered this component has a\r\n    // path of `/topics/:topicId`. The `:topicId` portion\r\n    // of the URL indicates a placeholder that we can\r\n    // get from `useParams()`.\r\n  \r\n    return (\r\n      <div>\r\n\r\n        <h3>\r\n               כאב ארוך\r\n            </h3>\r\n\r\n            <div>\r\n\r\n            <Row>\r\n                    <Col>\r\n                        <LongTestPage  docRefID = {props.docRefID} />\r\n                    </Col>\r\n            </Row>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n\r\nexport default ExpPage2;","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component, useState } from \"react\";\nimport ReactGA from 'react-ga';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nimport firebase from \"./services/firebase\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Button,\n  Container,\n  Row,\n  Col,\n  Navbar,\n  Nav\n} from \"react-bootstrap\";\nimport ManagerPage from './ManagerPage';\nimport ExpPage2 from './ExpPage2';\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      db: firebase.collection(\"/BGU-lab-dev\"),\n      activeDocRef: undefined,\n      activeTab:\"welcome\",\n\n    };\n    this.changeTab = this.changeTab.bind(this);\n\n\n    const db = firebase.settings({\n        timestampsInSnapshots: true\n      });\n\n\n    const trackingId = \"UA-180348020-1\"; \n    ReactGA.initialize(trackingId, {\n      debug: true\n    });\n    ReactGA.pageview(window.location.pathname + window.location.search);\n\n  }\n\n  getDocRefFromChild = (docRef) =>{\n    console.log(`recibed from child: ${docRef}`)\n    this.setState({activeDocRef:docRef})\n  }\n\n  componentDidMount() {\n    this.unsubscribe = firebase.collection('/BGU-lab-dev').onSnapshot(this.onCollectionUpdate) \n\n  }\n\n  componentWillUnmount() {\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\n    this.unsubscribe()\n  }\n\n  changeTab(tab){\n    this.setState({ activeTab: tab });\n\n  }\n\n\n  render(){\n    return (\n      <div  className=\"App\">\n\n      <Container fluid  className=\"mx-auto justify-content-center\">\n        <Row>\n          <Col>\n            <Navbar   style = {{ marginLeft: \"auto\", marginRight:\"auto\", width :\"50%\"}} >\n            <Nav className=\"mx-auto justify-content-center\">\n              <Nav.Link\n                href=\"\"\n                className=\"px-4\"\n                onClick={() => this.changeTab(\"manager\")}\n                active={this.state.activeTab === \"manager\"}\n                >\n                  מנהל ניסוי\n              </Nav.Link>\n            </Nav>\n\n            <Nav>\n              <Nav.Link\n                href=\"\"\n                className=\"px-4\"\n                onClick={() => this.changeTab(\"experimeneter\")}\n                active={this.state.activeTab === \"experimeneter\"}\n                >\n                  נסיין\n              </Nav.Link>\n            </Nav>\n\n            </Navbar>\n\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n\n              {\n              this.state.activeTab === \"welcome\" ? <h2> דף כניסה</h2>\n                                                  :\n            \n              this.state.activeTab === \"manager\" ?\n                                        <ManagerPage db = {this.state.db} docRef = {this.state.activeDocRef} />\n                                                  :\n                                        <ExpPage2  db = {this.state.db} sendDocRefToParent = {this.getDocRefFromChild}/>\n              }\n\n          </Col>\n\n        </Row>\n\n      </Container>\n      </div>\n\n    );\n  }\n  \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}