{"version":3,"sources":["logo.svg","services/firebase.js","ManagerPage.js","CalibrationPage.js","LongTestPage.js","ExpPage2.js","App.js","reportWebVitals.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","ManagerPage","props","useState","experimemtDocID","setExpirementerDoc","setExpirementerName","experimemtTime","setExpirementTime","experimentUpdatingData","setExpData","setAsLoaded","dataRenderedasList","setRenderData","newDocAlarm","setNewDocAlarm","justCreatedDocID","setJustCreatedDocId","comment","handleChangeComment","onCollectionUpdate","console","log","undefined","db","doc","onSnapshot","docSnapshot","data","renderData3","err","initNewDocument","add","fullname","calibrationTests","longTests","time","dateFormat","Date","then","docRef","id","orderBy","limit","get","docs","docData","docID","split","handleChange","evt","value","target","name","list","calibTest","forEach","item","push","Row","Col","type","onChange","testNum","length","useEffect","Button","variant","onClick","style","color","tyle","listStyleType","collection","CalibrationPage","querySnapshot","document","setState","sliderValue","onSliderChange","state","testCouner","start","lastDocID","bind","handleSubmit","handleReset","this","unsubscribe","snapshot","childSnapshot","tutorial","input","update","currTestCouner","dataToUpdate","prevState","newData","event","preventDefault","addTestScoreToDoc2","delete","min","max","defaultValue","step","reverse","railStyle","backgroundColor","height","trackStyle","handleStyle","borderColor","width","marginLeft","marginTop","Component","LongTestPage","CalibTest","docRefID","LongTest","ExpPage2","startExperiment","setExpirmentStatus","expirementerDoc","activeTab","changeTab","menuOrBackButton","setMenu","className","Navbar","marginRight","Nav","Link","href","active","App","getDocRefFromChild","activeDocRef","settings","timestampsInSnapshots","ReactGA","initialize","debug","pageview","window","location","pathname","search","tab","Container","fluid","sendDocRefToParent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d04e073.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import firebase from \"firebase\";\r\n\r\nconst config = {\r\n\r\n    apiKey: \"AIzaSyA3Jx8S_Yh6vdOI9RRP1ybnuG_Kvox093g\",\r\n    authDomain: \"slider-app1.firebaseapp.com\",\r\n    databaseURL: \"https://slider-app1.firebaseio.com\",\r\n    projectId: \"slider-app1\",\r\n    storageBucket: \"slider-app1.appspot.com\",\r\n    messagingSenderId: \"813536171331\",\r\n    appId: \"1:813536171331:web:ee4f67d30e6b1f45c48bf6\",\r\n    measurementId: \"G-2PMF6CRJ79\"\r\n }\r\n\r\n//!firebase.apps.length ? firebase.initializeApp(config) : null;\r\nfirebase.initializeApp(config);\r\n\r\n export default  firebase.firestore();\r\n","import React, { useState , useEffect} from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  ListGroup,\r\n\r\n} from \"react-bootstrap\";\r\nimport firebase from \"./services/firebase\";\r\n\r\nimport dateFormat from 'dateformat';\r\n\r\n\r\n\r\n const ManagerPage = (props) => {\r\n\r\n        const [experimemtDocID, setExpirementerDoc] = useState();\r\n        const [experimemterName, setExpirementerName] = useState(\"\");\r\n        const [experimemtTime, setExpirementTime] = useState(\"\");\r\n        const [experimentUpdatingData, setExpData] = useState()\r\n        const [dataAsLsit, setDataAsList] = useState([])\r\n        const [loaded, setAsLoaded] = useState(false)\r\n        const [dataRenderedasList, setRenderData] = useState([])\r\n        const [newDocAlarm, setNewDocAlarm] = useState(false)\r\n        const [justCreatedDocID, setJustCreatedDocId] = useState(\"\");\r\n        const [comment,handleChangeComment] = useState();\r\n\r\n    useEffect(() => { \r\n        const db = props.db\r\n        db.orderBy('time', 'desc').limit(1).get().\r\n           then((data) =>{\r\n               const docRef = data.docs[0];\r\n               const docData = docRef.data()\r\n               const docID = docRef.id\r\n               setExpirementerDoc(docID)\r\n               setExpData(data)\r\n               setExpirementerName(docData[\"fullname\"])\r\n               const time = docData.time.split(\" \")[1].split(\":\")\r\n               setExpirementTime(time[0] + \":\" + time[1])\r\n               setAsLoaded(true)\r\n               onCollectionUpdate()\r\n\r\n               renderData3()\r\n\r\n           } \r\n           )\r\n\r\n\r\n        //remember to unsubscribe from your realtime listener on unmount or you will create a memory leak\r\n        return () => undefined\r\n    }, []);\r\n\r\n\r\n\r\n\r\n\r\n     function getLateseDocID(){\r\n        const db = props.db\r\n         db.orderBy('time', 'desc').limit(1).get().\r\n            then((data) =>{\r\n                const docRef = data.docs[0];\r\n                const docData = docRef.data()\r\n                const docID = docRef.id\r\n                setExpirementerDoc(docID)\r\n                setExpirementerName(docData[\"fullname\"])\r\n                const time = docData.time.split(\" \")[1].split(\":\")\r\n\r\n                setExpirementTime(time[0] + \":\" + time[1])\r\n                setAsLoaded(true)\r\n\r\n                onCollectionUpdate()\r\n                renderData3()\r\n\r\n\r\n            } \r\n            )\r\n\r\n    }\r\n   \r\n\r\n     function onCollectionUpdate() {\r\n         console.log(\"update: \" +experimemtDocID)\r\n         if(experimemtDocID != undefined){\r\n            const doc = props.db.doc(experimemtDocID)\r\n\r\n            const observer = doc.onSnapshot(docSnapshot => {\r\n                const data = docSnapshot.data();\r\n                // console.log(`Received doc snapshot:${docSnapshot.id} ${data}`);\r\n               // console.log(data)\r\n                setExpData(data)\r\n                renderData3()\r\n                // ...\r\n              }, err => {\r\n                console.log(`Encountered error: ${err}`);\r\n              });\r\n\r\n         }\r\n        \r\n\r\n      }\r\n\r\n\r\n    function initNewDocument(){\r\n        setNewDocAlarm(true);\r\n        const db = props.db;\r\n        console.log(db)\r\n        db.add({\r\n            fullname: \"ישראל ישראלי\",\r\n            calibrationTests: [],\r\n            longTests: [],\r\n            time:dateFormat(new Date(), \"yyyy-mm-dd HH:MM:ss\"),\r\n          }).then(docRef => {\r\n              console.log('*** STARTED NEW DOC: ' + docRef.id);\r\n              setJustCreatedDocId(docRef.id)\r\n\r\n            //   setExpirementerDoc(docRef.id)\r\n\r\n          }).then(()=>getLateseDocID() ) \r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    function continuteLastDocument(){\r\n        const db = props.db\r\n        db.orderBy('time', 'desc').limit(1).get().\r\n           then((data) =>{\r\n               const docRef = data.docs[0];\r\n            //    const docData = docRef.data()\r\n            //    const docID = docRef.id\r\n            //    setExpirementerDoc(docRef.id)\r\n            console.log(\"*** CONTINUE last doc: \" +docRef.id )\r\n            setNewDocAlarm(false)\r\n            renderData3()\r\n\r\n\r\n\r\n           }\r\n           )\r\n        \r\n    }\r\n\r\n    function handleChange(evt) {\r\n        const value = evt.target.value;\r\n        const name = evt.target.name\r\n        handleChangeComment({\r\n          ...comment,\r\n          [evt.target.name]: value\r\n        });\r\n        const db = props.db\r\n        // db.orderBy('time', 'desc').limit(1).get().\r\n        //     then((data) =>{\r\n        //         const docRef = data.docs[0];\r\n        //         const docRefUpdate = db.doc(docRef.id);\r\n        //         const docData = docRef.data()\r\n\r\n        //         let calibTest = docData[\"calibrationTests\"]\r\n        //         console.log(calibTest)\r\n        //          calibTest[name-1] = {...calibTest[name-1], text:value  }\r\n        //          docRefUpdate.update({calibrationTests: calibTest})\r\n\r\n\r\n        //     })\r\n      }\r\n\r\n    function renderData3(){\r\n        if(experimentUpdatingData){\r\n\r\n\r\n            const doc = props.db.doc(experimemtDocID)\r\n\r\n            const observer = doc.onSnapshot(docSnapshot => {\r\n                const data = docSnapshot.data();\r\n                console.log(`*** RENDERING list of :${docSnapshot.id}`);\r\n               // console.log(data)\r\n                let list = []\r\n                let calibTest = data[\"calibrationTests\"]\r\n                let name = 0\r\n\r\n                calibTest.forEach( (item) => {\r\n                    name++;\r\n                    // console.log(`${item.testNum} : ${item.value}`)\r\n                    list.push(\r\n                        <Row>\r\n                            <Col>\r\n                                \r\n                                <form>\r\n                                {/* <li key={id} style={{ listStyleType: \"none\" }}>\r\n                                {item.testNum} : {item.value}\r\n                                \r\n                                </li> */}\r\n\r\n                                    <label>\r\n                                    <input\r\n                                    name = {name}\r\n                                    type=\"text\"\r\n                                    value={comment}\r\n                                    onChange={handleChange}\r\n                                    \r\n                                  />\r\n                                      {item.testNum} : {item.value}\r\n\r\n                                    </label>\r\n                                </form>\r\n                         </Col>\r\n                        </Row>\r\n                    )\r\n                })\r\n                console.log(docSnapshot.id + \" *,* \" + justCreatedDocID)\r\n\r\n                if (list.length > 0)  {\r\n                    setRenderData(list);\r\n                    if(docSnapshot.id === justCreatedDocID){\r\n                        console.log(\"***renering the newest list\")\r\n\r\n                    }\r\n                }\r\n                else{\r\n                    setRenderData(<h6>פרטי ניסוי יועדכנו כאשר הניסוי יחל</h6>)\r\n                }\r\n                \r\n\r\n                // ...\r\n              }, err => {\r\n                console.log(`Encountered error: ${err}`);\r\n              });\r\n            \r\n\r\n        }\r\n  \r\n      }\r\n\r\n    \r\n        return (\r\n            <div>\r\n                <h3>דף מנהל</h3>\r\n                {/* <h6>שם הנסיין: {experimemterName} </h6> */}\r\n                <h6>זמן תחילת הניסוי: {experimemtTime} </h6>\r\n\r\n            \r\n                <Row>\r\n                        <Col>\r\n                            <Button variant=\"primary\"\r\n                                onClick = {()=> {\r\n                                initNewDocument();\r\n                                }}> \r\n                                התחל ניסוי עבור נסיין חדש\r\n                            </Button>\r\n                            | \r\n\r\n                            {/* <Button variant=\"success\"\r\n                                onClick={getLateseDocID}>\r\n                                הצג פרטי ניסוי נוכחי\r\n                            </Button>\r\n\r\n                            | */}\r\n\r\n                            <Button  variant=\"success\"\r\n                                onClick = {()=> {\r\n                                    continuteLastDocument();\r\n                                    }}\r\n                                >\r\n                                המשך ניסוי אחרון\r\n                            </Button>\r\n                        </Col>\r\n                    </Row>\r\n\r\n                    {\r\n                        newDocAlarm ?\r\n                        <h6 style ={{color:\"red\"}}>\r\n                             ביקשת להתחיל ניסוי חדש, אנא לחץ על המשך ניסוי אחרון כדי לראות פרטי ניסוי חדש \r\n                        </h6>:\r\n                        null\r\n                    }\r\n\r\n\r\n\r\n                <div>\r\n                    <ul tyle={{ listStyleType: \"none\" }}>\r\n\r\n                        {\r\n                     \r\n\r\n                                dataRenderedasList\r\n                                \r\n                \r\n                        }\r\n                    \r\n\r\n                    </ul>\r\n\r\n                    {\r\n                     \r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        );\r\n}\r\n\r\nexport default ManagerPage;","import firebase from \"./services/firebase\";\r\nimport React, { Component, useState } from \"react\";\r\nimport Slider, { Range } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nconst db = firebase.collection(\"/BGU-lab-dev\");\r\n\r\nclass CalibrationPage extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      testCouner: 0,\r\n      sliderValue: 0,\r\n      start:false,\r\n      lastDocID:\"\",\r\n\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n    this.start = this.start.bind(this);\r\n\r\n\r\n    \r\n\r\n  }\r\n  componentDidMount() {\r\n    this.unsubscribe = firebase.collection('/slider-data').onSnapshot(this.onCollectionUpdate) \r\n    this.setState({sliderValue:0})\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\r\n    this.unsubscribe()\r\n  }\r\n\r\n  \r\n  onCollectionUpdate = (querySnapshot) => {\r\n    // we have to update the state\r\n    let value = 0;\r\n    querySnapshot.forEach((document) => {\r\n      const doc= document.data();\r\n      console.log(doc)\r\n      value = doc.value\r\n    })\r\n    this.setState({value:value, sliderValue:value})\r\n\r\n  }\r\n\r\n\r\n\r\n  getData() {\r\n    let value;\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).get().\r\n        then( docSnapshot => {\r\n          [docSnapshot].forEach( doc => {\r\n            const data = doc.data();\r\n            console.log(doc.id, data);\r\n            console.log(`sliderID: ${data.id}, value: ${data.value}`)\r\n            value =  data.value;\r\n          })\r\n\r\n        })\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n    console.log(value)\r\n    return value\r\n  }\r\n\r\n\r\n\r\n  create(tutorial) {\r\n    return db.add(tutorial);\r\n  }\r\n\r\n\r\n\r\n  update( input) {\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).update({value:input})\r\n\r\n      })\r\n    })\r\n  }\r\n\r\n  addTestScoreToDoc2(input){\r\n         db.orderBy('time', 'desc').limit(1).get().\r\n            then((data) =>{\r\n              const docRef = data.docs[0];\r\n              const docData = docRef.data()\r\n              const docID = docRef.id\r\n              let currTestCouner = this.state.testCouner\r\n              if(this.state.lastDocID !== docRef.id) {\r\n                this.setState({lastDocID: docRef.id, testCouner:1})\r\n                currTestCouner=1;\r\n              }\r\n\r\n              let dataToUpdate = docData[\"calibrationTests\"]\r\n\r\n              let scoreCounter = `כיול ${this.state.testCouner}`\r\n              this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n              let newData ={testNum : ` כיול ${currTestCouner}`, value:input }\r\n              //newData[scoreCounter] = input\r\n              dataToUpdate.push(newData)\r\n              const docRefUpdate = db.doc(docRef.id);\r\n              docRefUpdate.update({calibrationTests: dataToUpdate})\r\n\r\n\r\n            } \r\n            )\r\n  }\r\n\r\n\r\n \r\n    \r\n  handleChange(event) {\r\n    this.setState({input: event.target.value}, ()=>{\r\n        this.update(event.target.value,this)\r\n      });\r\n    }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    //this.update(this.state.sliderValue)\r\n    this.addTestScoreToDoc2(this.state.sliderValue)\r\n    this.setState({sliderValue:0})\r\n\r\n  }\r\n\r\n  handleReset(event) {\r\n    event.preventDefault();\r\n    //this.setState({sliderValue:0})\r\n    this.setState({sliderValue:0})\r\n    \r\n\r\n  }\r\n\r\n  start(event) {\r\n    event.preventDefault();\r\n    //this.setState({sliderValue:0})\r\n    this.setState({sliderValue:0, start:true})\r\n\r\n  }\r\n\r\n  delete(id) {\r\n    return db.doc(id).delete();\r\n  }\r\n\r\n  onSliderChange = value => {\r\n    this.setState(\r\n      {\r\n        sliderValue:value\r\n      },\r\n      () => {\r\n        console.log(this.state.sliderValue);\r\n      }\r\n    );\r\n  };\r\n\r\n  \r\n  render(){\r\n    let sliderHeight = 200;\r\n    return (\r\n        <Row>\r\n          <Col>\r\n\r\n        <Row>\r\n\r\n          <Col >\r\n          {!this.state.start ?  \r\n                    <Button onClick ={this.start}>\r\n                    התחל\r\n                  </Button>\r\n          :\r\n                <div>\r\n                       <Button\r\n                variant=\"outline-primary\"\r\n                onClick={this.handleSubmit}\r\n              >\r\n                  Submit\r\n              </Button>\r\n\r\n              <Slider\r\n              min={0}\r\n              max={10}\r\n              defaultValue={8}\r\n              value={this.state.sliderValue}\r\n              onChange={this.onSliderChange}\r\n              step ={0.1}\r\n              reverse = {true}\r\n              railStyle={{ backgroundColor: 'grey', height: sliderHeight }}\r\n              trackStyle={{ backgroundColor: 'red', height: sliderHeight }}\r\n              handleStyle={{\r\n                borderColor: 'red',\r\n                height: sliderHeight,\r\n                width: 1,\r\n                marginLeft: -14,\r\n                marginTop: 0,\r\n                backgroundColor: 'white',\r\n              }}\r\n\r\n              />\r\n\r\n              {/* slider value: {this.state.sliderValue} */}\r\n\r\n\r\n                  \r\n                </div>\r\n          }\r\n\r\n     \r\n           \r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n   \r\n          </Col>\r\n        </Row>\r\n\r\n\r\n        </Col>\r\n        </Row>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default CalibrationPage;","import firebase from \"./services/firebase\";\r\nimport React, { Component, useState } from \"react\";\r\nimport Slider, { Range } from 'rc-slider';\r\nimport 'rc-slider/assets/index.css';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"react-bootstrap\";\r\n\r\n\r\nconst db = firebase.collection(\"/BGU-lab-dev\");\r\n\r\nclass LongTestPage extends Component{\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state ={\r\n      testCouner: 0,\r\n      sliderValue: 0,\r\n      start:false,\r\n      lastDocID:\"\",\r\n\r\n    }\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n    this.handleReset = this.handleReset.bind(this);\r\n    this.start = this.start.bind(this);\r\n\r\n\r\n    \r\n\r\n  }\r\n  componentDidMount() {\r\n    this.unsubscribe = firebase.collection('/slider-data').onSnapshot(this.onCollectionUpdate) \r\n    this.setState({sliderValue:0})\r\n\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\r\n    this.unsubscribe()\r\n  }\r\n\r\n  \r\n  onCollectionUpdate = (querySnapshot) => {\r\n    // we have to update the state\r\n    let value = 0;\r\n    querySnapshot.forEach((document) => {\r\n      const doc= document.data();\r\n      console.log(doc)\r\n      value = doc.value\r\n    })\r\n    this.setState({value:value, sliderValue:value})\r\n\r\n  }\r\n\r\n\r\n\r\n  getData() {\r\n    let value;\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).get().\r\n        then( docSnapshot => {\r\n          [docSnapshot].forEach( doc => {\r\n            const data = doc.data();\r\n            console.log(doc.id, data);\r\n            console.log(`sliderID: ${data.id}, value: ${data.value}`)\r\n            value =  data.value;\r\n          })\r\n\r\n        })\r\n        //console.log(`id: ${childSnapshot.id}, data: ${childSnapshot.data}`)\r\n      })\r\n    })\r\n    console.log(value)\r\n    return value\r\n  }\r\n\r\n\r\n\r\n  create(tutorial) {\r\n    return db.add(tutorial);\r\n  }\r\n\r\n\r\n\r\n  update( input) {\r\n    db.get().then(function(snapshot) {\r\n      snapshot.forEach( function(childSnapshot){\r\n        db.doc(childSnapshot.id).update({value:input})\r\n\r\n      })\r\n    })\r\n  }\r\n\r\n  addTestScoreToDoc2(input){\r\n         db.orderBy('time', 'desc').limit(1).get().\r\n            then((data) =>{\r\n              const docRef = data.docs[0];\r\n              const docData = docRef.data()\r\n              const docID = docRef.id\r\n              let currTestCouner = this.state.testCouner\r\n              if(this.state.lastDocID !== docRef.id) {\r\n                this.setState({lastDocID: docRef.id, testCouner:1})\r\n                currTestCouner=1;\r\n              }\r\n\r\n              let dataToUpdate = docData[\"calibrationTests\"]\r\n              this.setState(prevState =>  {return {testCouner: prevState.testCouner+1} })\r\n              let newData ={testNum : ` כאב ארוך  ${currTestCouner}`, value:input }\r\n              //newData[scoreCounter] = input\r\n              dataToUpdate.push(newData)\r\n              const docRefUpdate = db.doc(docRef.id);\r\n              docRefUpdate.update({calibrationTests: dataToUpdate})\r\n\r\n\r\n            } \r\n            )\r\n  }\r\n\r\n\r\n \r\n    \r\n  handleChange(event) {\r\n    this.setState({input: event.target.value}, ()=>{\r\n        this.update(event.target.value,this)\r\n      });\r\n    }\r\n\r\n  handleSubmit(event) {\r\n    event.preventDefault();\r\n    //this.update(this.state.sliderValue)\r\n    this.addTestScoreToDoc2(this.state.sliderValue)\r\n    this.setState({sliderValue:0})\r\n\r\n  }\r\n\r\n  handleReset(event) {\r\n    event.preventDefault();\r\n    //this.setState({sliderValue:0})\r\n    this.setState({sliderValue:0})\r\n    \r\n\r\n  }\r\n\r\n  start(event) {\r\n    event.preventDefault();\r\n    //this.setState({sliderValue:0})\r\n    this.setState({sliderValue:0, start:true})\r\n\r\n  }\r\n\r\n  delete(id) {\r\n    return db.doc(id).delete();\r\n  }\r\n\r\n  onSliderChange = value => {\r\n    this.setState(\r\n      {\r\n        sliderValue:value\r\n      },\r\n      () => {\r\n        console.log(this.state.sliderValue);\r\n      }\r\n    );\r\n  };\r\n\r\n  \r\n  render(){\r\n    let sliderHeight = 200;\r\n    return (\r\n        <Row>\r\n          <Col>\r\n\r\n        <Row>\r\n\r\n          <Col >\r\n          {!this.state.start ?  \r\n                    <Button onClick ={this.start}>\r\n                    התחל\r\n                  </Button>\r\n          :\r\n                <div>\r\n                       <Button\r\n                variant=\"outline-primary\"\r\n                onClick={this.handleSubmit}\r\n              >\r\n                  Submit\r\n              </Button>\r\n\r\n              <Slider\r\n              min={0}\r\n              max={10}\r\n              defaultValue={8}\r\n              value={this.state.sliderValue}\r\n              onChange={this.onSliderChange}\r\n              step ={0.1}\r\n              reverse = {true}\r\n              railStyle={{ backgroundColor: 'grey', height: sliderHeight }}\r\n              trackStyle={{ backgroundColor: 'red', height: sliderHeight }}\r\n              handleStyle={{\r\n                borderColor: 'red',\r\n                height: sliderHeight,\r\n                width: 1,\r\n                marginLeft: -14,\r\n                marginTop: 0,\r\n                backgroundColor: 'white',\r\n              }}\r\n\r\n              />\r\n\r\n              {/* slider value: {this.state.sliderValue} */}\r\n\r\n\r\n                  \r\n                </div>\r\n          }\r\n\r\n     \r\n           \r\n          </Col>\r\n        </Row>\r\n        <Row>\r\n          <Col>\r\n   \r\n          </Col>\r\n        </Row>\r\n\r\n\r\n        </Col>\r\n        </Row>\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default LongTestPage;","import React, { Component , useState} from 'react';\r\n\r\nimport CalibrationPage from './CalibrationPage'\r\nimport LongTestPage from './LongTestPage'\r\n\r\nimport './ExpPage2.css';\r\n\r\n\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport {\r\n  Button,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Navbar,\r\n  Nav\r\n} from \"react-bootstrap\";\r\n\r\n\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Route,\r\n    Link,\r\n    useRouteMatch,\r\n    useParams,\r\n\r\n  } from \"react-router-dom\";\r\n\r\nimport dateFormat from 'dateformat';\r\n\r\n\r\nconst ExpPage2 = (props) => {\r\n\r\n    // let { path, url } = useRouteMatch();\r\n    const [startExperiment, setExpirmentStatus] = useState(false);\r\n    const [expirementerDoc, setExpirementerDoc] = useState()\r\n    const [activeTab,changeTab] = useState(\"start\")\r\n    const [menuOrBackButton, setMenu] = useState(\"menu\")\r\n\r\n    function initNewDocument(){\r\n        const db = props.db;\r\n        console.log(db)\r\n        db.add({\r\n            fullname: \"ישראל ישראלי\",\r\n            calibrationTests: [],\r\n            longTests: [],\r\n            time:dateFormat(new Date(), \"yyyy-mm-dd HH:MM:ss\"),\r\n          }).then(docRef => {\r\n              console.log('new doc ref: ' + docRef.id);\r\n              setExpirementerDoc(docRef.id)\r\n              props.sendDocRefToParent(docRef.id)\r\n\r\n          }) \r\n\r\n\r\n        // console.log(\"new doc: \" + expirementerDoc +  \"\\n end of doc\")\r\n        // console.log(\"docRef: \" + resRef)\r\n    }\r\n\r\n    function continuteLastDocument(){\r\n        console.log (\"IN USE EFFECT\")\r\n        const db = props.db\r\n        db.orderBy('time', 'desc').limit(1).get().\r\n           then((data) =>{\r\n               const docRef = data.docs[0];\r\n            //    const docData = docRef.data()\r\n            //    const docID = docRef.id\r\n               setExpirementerDoc(docRef.id)\r\n\r\n\r\n           }\r\n           )\r\n        \r\n    }\r\n\r\n\r\n    \r\n\r\n        return (\r\n\r\n                <Row>\r\n                    <Col>\r\n                    <h2>\r\n                    דף נסיין \r\n\r\n                </h2>\r\n\r\n                    {\r\n                        !startExperiment  ? \r\n                        <Row>\r\n                            <Col>\r\n                                {/* <Button variant=\"primary\"\r\n                                 onClick = {()=> {\r\n                                    setExpirmentStatus(true);\r\n                                    initNewDocument()\r\n                                    }}> \r\n                                   התחל ניסוי עבור נסיין חדש\r\n                                </Button>\r\n                                */}\r\n\r\n                                <Button  variant=\"success\"\r\n                                    onClick = {()=> {\r\n                                        setExpirmentStatus(true);\r\n                                        continuteLastDocument()\r\n                                        }}\r\n                                    >\r\n                                    המשך\r\n                                </Button>\r\n                            </Col>\r\n                        </Row>\r\n\r\n                        : \r\n                        <Row>\r\n                            <Col>\r\n        \r\n                             \r\n                                {\r\n                                menuOrBackButton === \"menu\" ? \r\n                                <Row className=\"text-light bg-teva-lime py-3\">\r\n                                    <Col >\r\n                               \r\n                                    <Navbar   style = {{ marginLeft: \"auto\", marginRight:\"auto\", width :\"50%\"}} >\r\n                                   \r\n                                    \r\n                                    <Nav className=\"mx-auto justify-content-center\">\r\n                                        <Nav.Link\r\n                                            href=\"\"\r\n                                            className=\"px-4\"\r\n                                            onClick={() => {changeTab(\"LongTest\");setMenu(\"hide\") }}\r\n                                            active={activeTab === \"LongTest\"}\r\n                                            >\r\n                                            ניסוי ארוך\r\n                                        </Nav.Link>\r\n                                        </Nav>\r\n\r\n                                        <Nav>\r\n                                        <Nav.Link\r\n                                            href=\"\"\r\n                                            className=\"px-4\"\r\n                                            onClick={() => {changeTab(\"Calibration\"); setMenu(\"hide\")}}\r\n                                            active={activeTab === \"Calibration\"}\r\n                                            >\r\n                                            כיול כאב\r\n                                        </Nav.Link>\r\n                                        </Nav>\r\n\r\n                                        <Nav>\r\n                                        <Nav.Link\r\n                                            href=\"\"\r\n                                            className=\"px-4\"\r\n                                            active={activeTab === \"form\"}\r\n                                            >\r\n                                            פרטי נבדק (בקרוב)                                        \r\n                                            </Nav.Link>\r\n                                        </Nav>\r\n\r\n                                        </Navbar>\r\n\r\n                                        </Col>\r\n                                </Row>\r\n                           \r\n                                \r\n\r\n                                :\r\n                                <Navbar className=\"text-light bg-teva-lime py-3\" >\r\n                                    <Nav className=\"mx-auto justify-content-center\">\r\n                                            <Nav.Link\r\n                                                href=\"\"\r\n                                                className=\"px-4\"\r\n                                                onClick = {()=> setMenu(\"menu\")}\r\n                                                active={activeTab === \"LongTest\"}\r\n                                                >\r\n                                                חזרה לתפריט\r\n                                            </Nav.Link>\r\n                                        </Nav>\r\n                                </Navbar>\r\n\r\n                            }\r\n\r\n                                <Row>\r\n                                    <Col>\r\n\r\n                                        {\r\n                                            activeTab === \"start\" ? null :\r\n                                            activeTab === \"Calibration\" ? <CalibTest docRefID = {expirementerDoc}></CalibTest> :\r\n                                                                            <LongTest docRefID = {expirementerDoc} />\r\n                                        }\r\n                                    </Col>\r\n\r\n                                </Row>\r\n\r\n\r\n\r\n                            \r\n                               </Col>\r\n                        </Row>\r\n                    }\r\n                   \r\n                    </Col>\r\n                </Row>\r\n  \r\n\r\n             \r\n        );\r\n    \r\n}\r\n\r\nfunction CalibTest(props) {\r\n    // The <Route> that rendered this component has a\r\n    // path of `/topics/:topicId`. The `:topicId` portion\r\n    // of the URL indicates a placeholder that we can\r\n    // get from `useParams()`.\r\n  \r\n    return (\r\n      <div>\r\n\r\n        <h3>\r\n                כיול כאב\r\n            </h3>\r\n\r\n            <div>\r\n\r\n            <Row>\r\n                    <Col>\r\n                        <CalibrationPage  docRefID = {props.docRefID}/>\r\n                    </Col>\r\n            </Row>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  function LongTest(props) {\r\n    // The <Route> that rendered this component has a\r\n    // path of `/topics/:topicId`. The `:topicId` portion\r\n    // of the URL indicates a placeholder that we can\r\n    // get from `useParams()`.\r\n  \r\n    return (\r\n      <div>\r\n\r\n        <h3>\r\n               כאב ארוך\r\n            </h3>\r\n\r\n            <div>\r\n\r\n            <Row>\r\n                    <Col>\r\n                        <LongTestPage  docRefID = {props.docRefID} />\r\n                    </Col>\r\n            </Row>\r\n            </div>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n\r\n\r\nexport default ExpPage2;","import logo from './logo.svg';\nimport './App.css';\nimport React, { Component, useState } from \"react\";\nimport ReactGA from 'react-ga';\n\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\n\n\nimport firebase from \"./services/firebase\";\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {\n  Button,\n  Container,\n  Row,\n  Col,\n  Navbar,\n  Nav\n} from \"react-bootstrap\";\nimport ManagerPage from './ManagerPage';\nimport ExpPage2 from './ExpPage2';\n\n\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      db: firebase.collection(\"/BGU-lab-dev\"),\n      activeDocRef: undefined,\n      activeTab:\"welcome\",\n\n    };\n    this.changeTab = this.changeTab.bind(this);\n\n\n    const db = firebase.settings({\n        timestampsInSnapshots: true\n      });\n\n\n    const trackingId = \"UA-180348020-1\"; \n    ReactGA.initialize(trackingId, {\n      debug: true\n    });\n    ReactGA.pageview(window.location.pathname + window.location.search);\n\n  }\n\n  getDocRefFromChild = (docRef) =>{\n    console.log(`recibed from child: ${docRef}`)\n    this.setState({activeDocRef:docRef})\n  }\n\n  componentDidMount() {\n    this.unsubscribe = firebase.collection('/BGU-lab-dev').onSnapshot(this.onCollectionUpdate) \n\n  }\n\n  componentWillUnmount() {\n    // we have to unsubscribe when component unmounts, because we don't need to check for updates\n    this.unsubscribe()\n  }\n\n  changeTab(tab){\n    this.setState({ activeTab: tab });\n\n  }\n\n\n  render(){\n    return (\n      <div  className=\"App\">\n\n      <Container fluid  className=\"mx-auto justify-content-center\">\n        <Row className=\"text-light bg-teva-lime py-3\"> \n          <Col>\n            <Navbar   style = {{ marginLeft: \"auto\", marginRight:\"auto\", width :\"50%\"}} >\n            <Nav className=\"mx-auto justify-content-center\">\n              <Nav.Link\n                href=\"\"\n                className=\"px-4\"\n                onClick={() => this.changeTab(\"manager\")}\n                active={this.state.activeTab === \"manager\"}\n                >\n                  מנהל ניסוי\n              </Nav.Link>\n            </Nav>\n\n            <Nav>\n              <Nav.Link\n                href=\"\"\n                className=\"px-4\"\n                onClick={() => this.changeTab(\"experimeneter\")}\n                active={this.state.activeTab === \"experimeneter\"}\n                >\n                  נסיין\n              </Nav.Link>\n            </Nav>\n\n            </Navbar>\n\n          </Col>\n        </Row>\n\n        <Row>\n          <Col>\n\n              {\n              this.state.activeTab === \"welcome\" ? <h2> דף כניסה</h2>\n                                                  :\n            \n              this.state.activeTab === \"manager\" ?\n                                        <ManagerPage db = {this.state.db} docRef = {this.state.activeDocRef} />\n                                                  :\n                                        <ExpPage2  db = {this.state.db} sendDocRefToParent = {this.getDocRefFromChild}/>\n              }\n\n          </Col>\n\n        </Row>\n\n      </Container>\n      </div>\n\n    );\n  }\n  \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}